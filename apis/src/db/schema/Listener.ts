// This file is generated by Sim IDX. Do not edit manually.
import { pgEnum, pgTable as table } from "drizzle-orm/pg-core";
import * as t from "drizzle-orm/pg-core";
import { db, types } from "@duneanalytics/sim-idx";

export const creationsBase = table("creations_base", {
  blockNumber: db.uint64('block_number'),
  blockTimestamp: db.uint64('block_timestamp'),
  contractAddress: db.address('contract_address'),
  initializationCodeHash: db.bytes32('initialization_code_hash'),
  initializationCodeLength: db.uint64('initialization_code_length'),
  deployedBytecodeHash: db.bytes32('deployed_bytecode_hash'),
  deployedBytecodeLength: db.uint64('deployed_bytecode_length'),
  txnHash: db.bytes32('txn_hash'),
  isFactory: t.boolean('is_factory'),
  directDeploy: t.boolean('direct_deploy'),
  deployerAddress: db.address('deployer_address'),
  deployerType: t.text('deployer_type'),
  factoryAddress: db.address('factory_address'),
  deploymentType: t.text('deployment_type'),
  txFrom: db.address('tx_from'),
  txTo: db.address('tx_to'),
  factoryFuncSig: db.bytes4('factory_func_sig'),
  factoryCaller: db.address('factory_caller'),
})

export const logsBase = table("logs_base", {
  contractAddress: db.address('contract_address'),
  topic0: db.bytes32('topic0'),
  topic1: db.bytes32('topic1'),
  topic2: db.bytes32('topic2'),
  topic3: db.bytes32('topic3'),
  data: db.bytes('data'),
  txnHash: db.bytes32('txn_hash'),
  blockNumber: db.uint64('block_number'),
  blockTimestamp: db.uint64('block_timestamp'),
  evtIndex: db.uint64('evt_index'),
  traceFrom: db.address('trace_from'),
  txFrom: db.address('tx_from'),
  txTo: db.address('tx_to'),
  originalCallDepth: db.uint64('original_call_depth'),
  emittedAfterTraceAddress: t.text('emitted_after_trace_address'),
  userOpFrom: db.address('user_op_from'),
  funcSig: db.bytes4('func_sig'),
})

export const tracesBase = table("traces_base", {
  blockTimestamp: db.uint64('block_timestamp'),
  blockNumber: db.uint64('block_number'),
  txnHash: db.bytes32('txn_hash'),
  caller: db.address('caller'),
  callee: db.address('callee'),
  funcSig: db.bytes4('func_sig'),
  parentFuncSig: db.bytes4('parent_func_sig'),
  txFrom: db.address('tx_from'),
  txTo: db.address('tx_to'),
  userOpFrom: db.address('user_op_from'),
  callDepth: db.uint64('call_depth'),
  traceAddress: t.text('trace_address'),
  success: t.boolean('success'),
  callType: db.uint64('call_type'),
})
